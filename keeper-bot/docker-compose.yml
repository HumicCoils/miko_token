version: '3.8'

services:
  keeper-bot:
    build:
      context: .
      dockerfile: Dockerfile
    image: miko-keeper-bot:latest
    container_name: miko-keeper-bot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
    ports:
      - "3000:3000"  # Health check port
      - "9090:9090"  # Metrics port
    volumes:
      - ./logs:/app/logs
      - ./state:/app/state
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - miko-network

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: miko-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - miko-network

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: miko-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - miko-network

networks:
  miko-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data: